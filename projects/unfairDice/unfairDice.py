import random 

def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.

    """

    # initalize PRNG
    random.seed(s)

    mapping = []
    rolls = []

    # map each probability to an intervel
    # and store in the list mapping
    for i in range(0, len(prob_list)):
    	if i == 0:
    		mapping.append(0 + prob_list[i])
    	else:
    		mapping.append(mapping[i - 1] + prob_list[i])

   # simulate every dice roll, given n 
   # and append it to the list roll
    for i in range(0, n):
    	# randomly generated number
    	num = random.random()
    	current_index = 0 #Change variable name
    	while num > mapping[current_index]:
    		current_index += 1
    	rolls.append(current_index + 1) 

    # return the resulting rolls
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # solve the problem here by replacing the pass keyword
    print("Frequency Histogram: ", m, "-sided Die", sep = '')

    # find the mode of the list in order
    # to calculate the scaler value
    # max_num is the mode 
    max_num = -1
    for i in range(1, m + 1):
    	num = rolls.count(i)
    	if num > max_num:
    		max_num = num
    		
    # print the correct number of # and -
    for i in range(1, m + 1):
    	num = rolls.count(i)
    	# multiple each postive number by the scaler value 
    	# in order to scale the length of the histogram
    	if num > 0:
    		num = round((width / max_num) * num)
    	print(i, ".", sep = '', end = '')
    	for j in range(0, num):
    		print("#", end = '')
    	hyp_num = width - num
    	for k in range(hyp_num):
    		print("-", end = '')
    	print()

if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations. 
    pass
